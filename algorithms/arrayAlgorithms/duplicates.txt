/*****************BEST POSSIBLE WAY********************.
const myArray = [1,2,3,1,5,8,1,2,9,4];
const unique = [...new Set(myArray)]; // [1, 2, 3, 5, 8, 9, 4]

const myString = ["a","b","c","a","d","b"];
const uniqueString = [...new Set(myString)]; //["a", "b", "c", "d"]




code.splice(code.indexOf(cMin)) it looks like indexOf removes duplicates 
[
  108, 101, 101,
  116,  99, 111,
  100, 101
]
[ 108, 101, 101, 116 ]
[ 108 ]
[]
[]
[]
[]
[]
[]
Hint:
let chars = ['A', 'B', 'A', 'C', 'B'];

let uniqueChars = chars.filter((c, index) => {
    return chars.indexOf(c) === index;
});

chars.filter((c, index) => chars.indexOf(c) === index);  ---> [ 'A', 'B', 'C' ]
let rmDup = arr.filter((c, index) => arr.indexOf(c) === index) 

var stringMatching = function(words) {
  let arr=[], res;

  for(e of words){
  res = words.filter(elem => elem.includes(e));
  res.sort((a, b) => b.length - a.length)
  res.splice(0, 1);
  arr = [...arr, ...res]
}
let rmDup = arr.filter((c, index) => arr.indexOf(c) === index)  //remove dupicates words
return rmDup
};
stringMatching(words = ["leetcoder","leetcode","od","hamlet","am"]); 

var stringMatching = function(words) {
  let sub, res=[];
  for(e of words){
  let hiLen = Math.max(...(words.map(e => e.length)));
  sub=words.filter(e => e.length<hiLen);
  res = [...res, ...sub]
}
let noRepeat = res.filter((w, i) => res.indexOf(w) === i)
return noRepeat
};
stringMatching(words = ["dzf","dzfay","hrl","ydzfo"]); 
1) Remove duplicates from an array using a Set
A Set is a collection of unique values. To remove duplicates from an array:

First, convert an array of duplicates to a Set. The new Set will implicitly remove duplicate elements.
Then, convert the set back to an array.
The following example uses a Set to remove duplicates from an array:

let chars = ['A', 'B', 'A', 'C', 'B'];
let uniqueChars = [...new Set(chars)];

console.log(uniqueChars);
Code language: JavaScript (javascript)
Output:

[ 'A', 'B', 'C' ]
Code language: JSON / JSON with Comments (json)
2) Remove duplicates from an array using indexOf() and filter() methods
The indexOf() method returns the index of the first occurrence of an element in an array. For example:

let chars = ['A', 'B', 'A', 'C', 'B'];
chars.indexOf('B');
Code language: JavaScript (javascript)
Output:

1        
The duplicate item is the item whose its index is different from its indexOf() value:

let chars = ['A', 'B', 'A', 'C', 'B'];

chars.forEach((c, index) => {
    console.log(`${c} - ${index} - ${chars.indexOf(c)}`);
});
Code language: JavaScript (javascript)
Output:

A - 0 - 0
B - 1 - 1
A - 2 - 0
C - 3 - 3
B - 4 - 1
To remove the duplicates, you use the filter() method to include only elements whose indexes match their indexOf values:

let chars = ['A', 'B', 'A', 'C', 'B'];

let uniqueChars = chars.filter((c, index) => {
    return chars.indexOf(c) === index;
});

console.log(uniqueChars);
Code language: JavaScript (javascript)
Output:

[ 'A', 'B', 'C' ]
Code language: JSON / JSON with Comments (json)
To find the duplicate values, you just need to reverse the condition:

let chars = ['A', 'B', 'A', 'C', 'B'];

let dupChars = chars.filter((c, index) => {
    return chars.indexOf(c) !== index;
});

console.log(dupChars);
Code language: JavaScript (javascript)
Output:

[ 'A', 'B' ]
Code language: JSON / JSON with Comments (json)
3) Remove duplicates from an array using forEach() and include()
The include() returns true if an element is in an array or false if it is not.

The following example iterates over elements of an array and adds to a new array only elements that are not already there:

let chars = ['A', 'B', 'A', 'C', 'B'];

let uniqueChars = [];
chars.forEach((c) => {
    if (!uniqueChars.includes(c)) {
        uniqueChars.push(c);
    }
});

console.log(uniqueChars);
Code language: JavaScript (javascript)
Output:

[ 'A', 'B', 'C' ]  
//with sort 
var sortString = function(s) {
let curr='', str='';
s= s.split('');
s.sort(); //sort to put in order so if they are not equal they are duplicates 
console.log(s)

for(e of s){
  if(e!=curr) str+=e, curr=e;
}

return str

};

  nums.forEach(e => (map.get(e)) ? map.set(e, map.get(e)+1) : map.set(e, 1));
  let elDeg = [...map.entries()].reduce((a, b ) => b[1] > a[1] ? b : a)