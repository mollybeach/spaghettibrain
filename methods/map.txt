/****************************************MAP EXAMPLES******************************/
Map
Map is a collection of keyed data items, just like an Object. But the main difference is that Map allows keys of any type.

Methods and properties are:

new Map() – creates the map.
map.set(key, value) – stores the value by the key.
map.get(key) – returns the value by the key, undefined if key doesn’t exist in map.
map.has(key) – returns true if the key exists, false otherwise.
map.delete(key) – removes the value by the key.
map.clear() – removes everything from the map.
map.size – returns the current element count.
var isIsomorphic = function(s, t) {
  let sMap = new Map;
  let tMap = new Map;
  
  for (i in s)
  { 
    !sMap.has(s[i]) && sMap.set(s[i], i);
    !tMap.has(t[i]) && tMap.set(t[i], i);
    
    if (sMap.get(s[i]) !== tMap.get(t[i]))
    {
      return false;
    }
  }
  
  return true;
};
22
let map = new Map(), count=1, str='';
for(e of s){ 
  map.has(e) && map.set(e, count)
  map.set(e, count++)
 }
//console -> Map { 'a' => 4, 'b' => 8, 'c' => 12 }
The way you do it is fine. That is how you need to do it if you are working with primitive values. If you want to avoid the call to map.set, then you must revert to a reference to a value. In other words, then you need to store an object, not a primitive:

let map = new Map();
map.set("a", {val: 1});
And then incrementing becomes:

map.get("a").val++;





function fun(value, key, map) {
  str+=key, map.get(key).val--;
  console.log(map)


  map.get(e) ?  map.set(e, {val: count}) : map.set(e, {val: count+=1})


var lengthOfLongestSubstring = function(s) {
    let letters = new Map()
    let highestLength = 0
    let length = 0
    // loop thru s until you find a repeating character and then slide and move to the letter of the repeating charcter
    for(i = 0; i < s.length; i++) {
        // this checks if a letter is no longer need for e.i abba when you go to b a is no longer used so you increase the length since it doesn't exist anymore
        if(letters.get(s[i]) !== undefined && letters.get(s[i]) >= i - length) {
            length = i - letters.get(s[i])
        } else {
            length++
        }
        letters.set(s[i], i)
        highestLength = Math.max(highestLength, length)
    }
    
    return highestLength
};



var lengthOfLongestSubstring = function(s) {
    let inst = new Map(), ln = 0;
    for(i = 0; i < s.length; i++) {
        if(inst.get(s[i])!==undefined && inst.get(s[i])>=i-ln){  ln = i-inst.get(s[i])} 
         else{ ln++};
        inst.set(s[i], i);  
    }   
    return ln
};

lengthOfLongestSubstring("abcabcbb");



Map { 'a' => 0, 'b' => 1, 'c' => 2 }
Map { 'a' => 3, 'b' => 1, 'c' => 2 }
Map { 'a' => 3, 'b' => 4, 'c' => 2 }
Map { 'a' => 3, 'b' => 4, 'c' => 5 }
Map { 'a' => 3, 'b' => 6, 'c' => 5 }


Map type has a special prototype to get length of the Map object

const map1 = new Map();

map1.set('a', 'alpha');
map1.set('b', 'beta');
map1.set('g', 'gamma');

console.log(map1.size);

for (const [key, value] of map) {
    // `key` is the key of the entry, `value` is the value
    if (/*...some condition...*/) {
        break;
    }
}
(You don't have to destructure, though, you could use for (const entry of map) and then use entry[0] for the key and entry[1] for the value.)

Or for looping keys:

for (const key of map.keys()) {
    // ...
Or for looping values:

for (const value of map.values()) {
    // ...

    let iter = map.keys();
while(!iter.next().done) {
  if(foo.match(iter.value)) {
    match = map.get(iter.value);
    break
  }
}


0

Well, it looks like this old JQuery thread has been coopted by ES6 Map users.

If this is what you're looking for, may I suggest using the Array.from() function which converts the Map to an Array. This allows you to easily chain transforms such as filter(), map(), etc.

const map = new Map([
  ['key one', 'value one'],
  ['key two', 'value two'],
]);

// Loop through key-value-pairs
Array.from(map.entries()).map(([key, val]) => console.log(key, val));

// Loop through map keys
Array.from(map.keys()).map(key => console.log(key));

// Loop through values
Array.from(map.values()).map(value => console.log(value));