/***************************************MATH EXAMPLES******************************/
var lengthOfLongestSubstring = function(s) {
    let inst = new Map(), ln = 0, lnHigh=0;
    for(i = 0; i < s.length; i++) {
        if(inst.get(s[i])!==undefined && inst.get(s[i])>=i-ln)  ln = i-inst.get(s[i]) 
         else ln++;
        inst.set(s[i], i);  
         lnHigh = Math.max(lnHigh, ln)
    }   
    return lnHigh
};

lengthOfLongestSubstring("abcabcbb");
use math max in a loop to maintain to store the highest current number 

/**********MATH MAX*********/
console.log(Math.max(1, 3, 2));
// expected output: 3

console.log(Math.max(-1, -3, -2));
// expected output: -1

const array1 = [1, 3, 2];

console.log(Math.max(...array1));

/declare 
var sum      = function(a, b){ return a + b; };
var subtract = function(a, b){ return a - b; };
var multiply = function(a, b){ return a * b; };
var divide   = function(a, b){ return a / b; };

var array1 = [1,2,3];
var array2 = [2,4,8];

operateArrays(array1, array2, sum);      //[3, 6, 11]
operateArrays(array1, array2, subtract); //[-1, -2, -5]
operateArrays(array1, array2, multiply); //[2, 8, 24]
operateArrays(array1, array2, divide);   //[0.5, 0.5, 0.375]



Math.max(...(x.map(e => e.length)));

nestedArr = [[1,5],[7,3],[3,5]] 
Math.max(...nestedArr.map(arr => arr.reduce((a, b) => a + b)));
//-> [[6],[10],[8]] -> max : returns : 10 



/****MAP. MA

You can spread the values() into Math.max:

let m = new Map([['a', 2], ['b',4], ['c',6]])

console.log("Max:", Math.max(...m.values()))