
/********************************TREE*Examples*****************************************/
 
function TreeNode(val, left, right) {
  var node = {};
  node.val = val === undefined ? 0 : val;
  node.left = left === undefined ? null : left;
  node.right = right === undefined ? null : right;
  return node;
}

/**************************/

inOrderDFS(){
    // a variable to store the visited nodes
    let result = []
    // helper function -- accepts a node
    function traverse(node){
        // if node has left, recursion to find the leftest leaf node
     if(node.left) traverse(node.left)
        // push the node to the result
        result.push(node)
        // if node has right, recurstion to find the rightest leaf node
     if(node.right) traverse(node.right) 
    }
    // invoke the helper function with the root
    traverse(root)
  // return the final result
  return result
}

preOrderDFS(){
     // create variable to store the visited nodes
     let result = []
     // helper function accepts a node
     function traverse(node){
         // push the node to the result
        result.push(node)
          //if the node has left, recursion to push it to the result
       if(node.left) traverse(node.left)
          // if the node has right, recursion to push it to the result
       if(node.right) traverse(node.right) 
     
     }
    // invoke the helper function with the root
    traverse(root)
     // return final result
    return result

}

postOrderDFS() {
  // create a variable to store the visited nodes
  let result = []
  // helper function accepts a node
  function traverse(node){
     // if node has left, recursion to find the leftest node
      if(node.left) traverse(node.left)
    // if node has right, recursion to find the rightest node
      if(node.right) traverse(node.right)
    // push the node found in the result
      result.push(node)
  
  } 
  // invoke helper function with root
  traverse(root)
  // return the final result
  return result
}

breadthFirstSearch() {
    // create a queue and a variable to store the values of nodes visited  
      let queue = []
      let result = []
    // initiate a node variable to store the current node
      let node 
       // push the root node to the queue   
            queue.push(root)
      // loop as long as there is anything in the queue
           while(queue.length){
                // dequeue a node from the queue 
                // push the visited node into the result
                node = queue.shift()
                result.push(node)
                 // push children to the queue
             if(node.left) queue.push(node.left)
             if(node.right) queue.push(node.right)
           
           }
        //return final traversed nodes array
          return result 

}
/********************hi*******/
/**
 * Definition for a binary tree node.
 */
export default class TreeNode {
  constructor(val) {
    this.val = val;
    this.left = null;
    this.right = null;
  }
}


/**
 * Encodes a tree to a single string.
 *
 * @param {TreeNode} root
 * @return {string}
 */
const serialize = function(root) {
  if (!root) {
    return '';
  }

  const list = [];

  const helper = function(node) {
    if (!node) {
      return;
    }

    list.push(node.val);

    helper(node.left);
    helper(node.right);
  };

  helper(root);

  return list.join();
};

/**
 * Decodes your encoded data to tree.
 *
 * @param {string} data
 * @return {TreeNode}
 */
const deserialize = function(data) {
  if (!data) {
    return null;
  }

  const preorder = data.split(',').map(item => parseInt(item, 10));
  const inorder = preorder.slice().sort((a, b) => a - b);

  return buildTree(preorder, inorder);
};

const buildTree = (preorder, inorder) => {
  const helper = (p1, p2, i1, i2) => {
    // sanity check
    if (p1 > p2 || i1 > i2) {
      return null;
    }

    const value = preorder[p1]; // get the root value
    const index = inorder.indexOf(value); // get inorder position
    const count = index - i1; // count nodes in left subtree
    const root = new TreeNode(value); // build the root node

    // build the left and right subtrees recursively
    root.left = helper(p1 + 1, p1 + count, i1, index - 1);
    root.right = helper(p1 + count + 1, p2, index + 1, i2);

    return root;
  };

  return helper(0, preorder.length - 1, 0, inorder.length - 1);
};

export { serialize, deserialize };

/**
 * Your functions will be called as such:
 * deserialize(serialize(root));
 */


 /*************************************QUESTION********************************************/

/*94. Binary Tree Inorder Traversal
Easy-Given the roo of a binary tree, return the inorder traversal of its nodes' values.

Example 1:
Input: roo = [1,null,2,3]
Output: [1,3,2]

Example 2:
Input: roo = []
Output: []

Example 3:
Input: roo = [1]
Output: [1] */

/************************************ANSWER********************************************/
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
 //roo = new TreeNode(val,left,right)
 
function TreeNode(val, left, right) {
  var node = {};
  node.val = val === undefined ? 0 : val;
  node.left = left === undefined ? null : left;
  node.right = right === undefined ? null : right;
  return node;
}
    function inordertrav(treeNode, res) {
      if(!treeNode) return res;
       inorder(treeNode.left, res);
       res.push(treeNode.val);
       inorder(treeNode.right, res);
       return res;
   }

function fun(arr) {
  console.log('line 62: ' + arr[0])
 // console.log('line 62: ' + arr)
  if (arr[0] === null){ return null};
  var node = new TreeNode(arr[0]);

  function preorder(curNode, index) {
    if (curNode == null || index >= arr.length) return index;
    var leftNode = arr[index] != null ? TreeNode(arr[index]) : null;
    var rightInd = preorder(leftNode, index + 1)
    curNode.left = leftNode;
    var rightNode = rightInd >= arr.length || arr[rightInd] == null ? null : TreeNode(arr[rightInd]);
    curNode.right = rightNode;
    return preorder(rightNode, rightInd + 1);
  }

  preorder(node, 1);
  return node;
}


function inorder(arr) {
  inordertrav()
}

// console.log(fun([1,null,2,3]));
inorder([1,null,2,3]);



//var rootNode = TreeNode(1, null, TreeNode(2, TreeNode(3, null, null), null), null);
//console.log(inorder(rootNode, []));


// deserialize
//Input: roo = [1,null,2,3]
//Output: [1,3,2]
// [1, 2, 3, 4, 5, 6]


function TreeNode(val, left, right) {
  let node = {};
  node.val = val === undefined ? 0 : val;
  node.left = left === undefined ? null : left;
  node.right = right === undefined ? null : right;
  return node;
}
function inOrder(treeNode, res) {
  //THEN FROM THE TREE WE DEDUCT THE INORDER TREVERSAL 
  if (!treeNode) return res;
  inOrder(treeNode.left, res);
  res.push(treeNode.val);
  inOrder(treeNode.right, res);
  return res;
}

function arrayToTree(arr) { //deserialize from array to tree structure
  if (arr[0] === null) {
    return null;
  }
  let tree = new TreeNode(arr[0]); // send first index to tree node {}

  //SINCE THE THE ARRAY IS IN NUMERICAL ORDER ESSENTIALLY WE'RE WORKING WITH A PREORDER TREVERSAL
  function preOrder(currentNode, index) {
    if (currentNode == null || index >= arr.length) return index;
    //sending TreeNode(arr[index]) one parameter not 3 will
   // it reads parameters left to right
   // it will make a tree node with null childern
   // same as saying TreeNode(1, null, null) but more succinct 
    
    let leftNode = arr[index] != null ? TreeNode(arr[index]) : null;
    let rightIndex = preOrder(leftNode, index + 1);
    currentNode.left = leftNode;
    let rightNode = rightIndex >= arr.length || arr[rightIndex] == null
        ? null
        : TreeNode(arr[rightIndex]);
    currentNode.right = rightNode;
    return preOrder(rightNode, rightIndex + 1);
  }
  preOrder(tree, 1); //we send the 1st node and a index of 1 to start on to preOrder
  console.log(tree)
  return tree;
}

function inorderTraversal(arr) {
  let root = arrayToTree(arr);
  return inOrder(root, []);
}

inorderTraversal([1, null, 2, 3]);
/*
(a) Inorder (Left, Root, Right) : 4 2 5 1 3 
(b) Preorder (Root, Left, Right) : 1 2 4 5 3 
(c) Postorder (Left, Right, Root) : 4 5 2 3 1
*/

/*****************/
function Node(val, left, right) {
  let node = {};
  node.val = val === undefined ? 0 : val;
  node.left = left === undefined ? null : left;
  node.right = right === undefined ? null : right;
  return node;
}
function arrayToTree(arr) {
   if (arr[0] === null) return null;
  function deserialize(cNode, i) {
    if (cNode == null || i >= arr.length) return i;
    let nodeL = arr[i] != null ? new Node(arr[i]) : null;
    let iRight = deserialize(nodeL, i+1);
    cNode.left = nodeL;
    let nodeR = iRight >= arr.length || arr[iRight] == null
        ? null
        : new Node(arr[iRight]);
    cNode.right = nodeR;
    return deserialize(nodeR, iRight + 1);
  }
  cNode = new Node(arr[0]);
  deserialize(cNode, 1);
  return cNode;
}
function isSymmetric(root) {
  if (!root) return false;
  function isMirror(treeX, treeY) {
    if (!treeX && !treeY) return true;
    if (!treeX || !treeY) return false;
    return (
      treeX.val === treeY.val &&
      isMirror(treeX.left, treeY.right) &&
      isMirror(treeX.right, treeY.left)
    );
  }
  let tree = arrayToTree(root);
  console.log(tree)
  return isMirror(tree.left, tree.right);
}

//isSymmetric([1,2,2,null,3,null,3]);
isSymmetric([1,2,2,3,4,4,3]);
/*************/
var inorderTraversal = function (root) {
  tree = root.reduce((tree, val) => (tree ? insertNode(tree, val) : new Node(val)), null);
  function insertNode(tree, val) {
    var node = tree,
      key;
    while (node.val !== val) {
      key = val < node.val ? "left" : "right";
      if (!node[key]) {
        node[key] = new Node(val);
        break;
      }
      node = node[key];
    }
    return tree;
  }
  var inorderTran = function (root) {
    const result = [];
    inorder(root);
    function inorder(node) {
      if (!node) return null;
      inorder(newnode.left);
      result.push(node.val);
      inorder(node.right);
    }
    return result;
  };

  //console.log(tree);
  //console.log(inorderTraversal(tree))
  return inorderTran(tree);
};
inorderTraversal([1, null, 2, 3]);
*/
parse array into a tree
deserialize

  function Node(val, left, right) {
  this.val = val === undefined ? 0 : val;
  this.left = left === undefined ? null : left;
  this.right = right === undefined ? null : right;
}