var stringMatching = function(words) {
  let arr=[], res;

  for(e of words){
  res = words.filter(elem => elem.includes(e));
  res.sort((a, b) => b.length - a.length)
  res.splice(0, 1);
  arr = [...arr, ...res]
}
//let rmDup = arr.filter((c, index) => arr.indexOf(c) === index)
return rmDup
};
stringMatching(words = 
["dzf","dzfay","hrl","ydzfo"]); 



wordy = ["dzf","dzfay","hrl","ydzfo"]; 

let y = Math.max(...(wordy.map(e => e.length)));
console.log(y)
//res=words.filter
res = wordy.filter(e => e.length<y);
console.log(res)
*/
/*
let output = ["pldam","ww"];
var stringMatching = function(words) {
  let hasSub, hiLen, sub, res=[], noRepeat;
  for(e of words){
  hasSub = words.filter(elem => elem.some(e));
  console.log(hasSub)
  hiLen = Math.max(...(hasSub.map(el => el.length)));
  sub = hasSub.filter(ele => ele.length<hiLen);
  //console.log(sub)
  res = [...res, ...sub]
}
noRepeat = res.filter((w, i) => res.indexOf(w) === i)
noRepeat === output ? console.log('correct') : console.log('incorrect')
return noRepeat
};
stringMatching(words = ["mass","as","hero","superhero"])
//["pldam","klpldamyp","ww","xnpldam","qz","prww","vbhu","fww"]); 


  




var sortSentence = function(s) {
  let inst = new Map(), str='';
 for(i=0; i<s.length; i++){
    inst.set(s[i], i)
   if(!isNaN(s[i])){
    //  console.log(inst.get(' '))
     // console.log(s[i])
 //  str = str+s.substring(inst.get(s[' ']), i)
 console.log(inst.get(' '))
 console.log(i)
 str=str+s.substring((inst.get(' ')), i)
    }
 }
 
 
 //console.log(inst)
 //str= str.replace(/[0-9]/g, '');
  return str
  
};
 
sortSentence("is2 sentence4 This1 a3")


  /******** ANOTHER***/
    let matchStudents=[];
    let matchSandwiches=[];
    /****TO PUSH MULTIPLE INDEXES TO AN ARRAY AND NOT PUSH THE WHOLE ARRAY ******/
  for(i=0; i<max; i++ ){
    matchSandwiches.push(parseFloat((sandwiches.splice(i, 1).toString())));
    matchStudents.push(parseFloat((students.splice(i, 1).toString())));
  }

  //  /*  let lengthArr = [];
  lengthArr.push(students.length, sandwiches.length);
  let max = Math.max(...lengthArr);
  */
//for(i=0; i<max*2; i++ ){ 

/****SORT*** REVERSE***/
fruits.reverse();

let input = 10000;
let n = 10
how many times a number can be divided by N
console.log(Math.floor(Math.log(input)/Math.log(n)) )
result -> 4





/*
~~~~~WELCOME TO SPAGHETTI BRAIN REPL CHANNEL~~~~~~~~
~PASTE 1-3 LEETCODE QUESTIONS HERE EVERYDAY~~~~~~~~
~~~~~~PREVIOUSLY SOLVED QUESTION SOLUTIONS~~~~~~
~CAN BE FOUND IN THE FILES~~~~~~~~~~~
~TO THE LEFT SIDE OF THE WEBPAGE~~~~~
~~~~~SEPERATED BY: EASY MEDIUM AND HARD~~~~~~~~~~
~THE IDEA BOARD DRAWING BOARD~~~~
~~~~~IN THE FILES CAN BE USED~
~~~TO WORK OUT PROBLEMS VISUALLY WITH PEERS~~~~~~~~~~~! 
~~~~~~~~~~~~~~ENJOY!~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/





/**************************************************************************************/
/*************************************QUESTION********************************************/
/***************************************************************************************
/*
1. Two Sum
Easy

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.


Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 */
/*************************************************************************************/
/************************************ANSWER********************************************/
/*********************************************************************************/

var twoSum = function(nums, target) {
for (i = 0; i < nums.length; i++) {
  for (j = 1; j < nums.length; j++) {
    if(i!= j) {
   if (nums[i]+nums[j]===target) return [i,j]
   }
}
} 
};
twoSum([2,5,5,11],10)

// let ans=[];
 //console.log(nums)

