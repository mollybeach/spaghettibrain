/******************************char********************************************/
/let onlyChar= [...s].filter(e => /[a-z0-9]/.test(e)) filter out everything ot a letter or number 
let onlyLettersArray = message.split('').filter(char => /[a-zA-Z]/.test(char));
let arr = ['A', 'B']

if uppercase 
 console.log(65<= arr.charCodeAt(0) <=90)--> true
 console.log(arr.charCodeAt(0) <=90)--> true

if lower case
  console.log(97<= arr.charCodeAt(0) <=122). --> true
    console.log(arr.charCodeAt(0) <=122). --> true



  if char 
 console.log(65<= s.charCodeAt(0) <=90 || 97<= s.charCodeAt(0) <=122)
  console.log(65<= arr.charCodeAt(0) <=90 || 97<= arr.charCodeAt(0) <=122) //true 

  function isBetween(i, arr) {
  let n = arr.charCodeAt(i)
  let isUpperCase = ((n - 64) * (n - 91) <= 0)
  let isLowerCase = ((n - 96) * (n - 123) <= 0)
 if(isUpperCase || isLowerCase) return true
 else return false
}
 return  isBetween(3, s)

s.charCodeAt(i)-47)*(s.charCodeAt(i)-58)<= 0) ///checking for NUMS 
var isPalindrome = function(s) {

function isBetween(i, arr) {
  let n = arr.charCodeAt(i)
  let isUpperCase = ((n - 64) * (n - 91) <= 0)
  let isLowerCase = ((n - 96) * (n - 123) <= 0)
 if(isUpperCase || isLowerCase) return true
 else return false
}
let w = [...s].filter((e, i)=>  isBetween(i, s)!=false);

 return  w
};
removes everything that isnt a char 
[
  'A', 'm', 'a', 'n', 'a',
  'p', 'l', 'a', 'n', 'a',
  'c', 'a', 'n', 'a', 'l',
  'P', 'a', 'n', 'a', 'm',
  'a'
]
short hand
let onlyChar= [...s].filter((e, i)=>  ((s.charCodeAt(i) - 64) * (s.charCodeAt(i) - 91) <= 0) || ((s.charCodeAt(i) - 96) * (s.charCodeAt(i) - 123) <= 0));

 return  onlyChar

A-Z         a-z
65-90       97-122
s.charCodeAt(index) --> 113
s.charAt(index)-->a
String.fromCharCode(65) -----> 'A'
'A'.charCodeAt() ------> 65
let elem = 'A'
elem.charCodeAt() ---> 65





String.prototype.charCodeAt()
The charCodeAt() method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index.

const sentence = 'The quick brown fox jumps over the lazy dog.';

const index = 4;

console.log(sentence.charCodeAt(index)
// expected output: "The character code 113 is equal to q"


    if the string is all alphabet
    s = "paper"
     console.log((/[a-zA-Z]/).test(s)) -->     true

     (s2 = "pape%r"
       console.log((/[a-zA-Z]/).test(s2)) -->     false


if any charctors in either of these strings are not alphabet then
return false: 
        if(!(/[a-zA-Z]/).test(s) || !(/[a-zA-Z]/).test(s2)) return false

if either of these strings is not alphabet or number

        //!(/[a-zA-Z0-9]/).test(s)

41

If you have only one char and not a string, you can use:

'\n'.charCodeAt();

let s= 'apple';
!s[5] && console.log(s) //if s[5] does not exist then return apple  if it does it returns false

let s2= 'pea';
!s[2] && console.log(s)//if s[5] does not exist then return pea  if it does it returns false


code = s.map(e => e.charCodeAt()); //[ 108, 101, 101, 116,  99, 111, 100, 101]

for(e of s){

let min = Math.min(...code);
let max = Math.max(...code);
fil = code.filter(e=> e!=curr);


let smallest= function() {
cMin = Math.min(...fil); 
minIndex = fil.indexOf(cMin);
code.splice(minIndex, 1) 
curr=cMin;
toChar= code.map(x => String.fromCharCode(x));
}



//largest
let largest= function() {
  cMax = Math.max(...fil); 
  maxIndex = fil.indexOf(cMax);
  code.splice(maxIndex, 1)
  curr=cMax;
  }



var isPalindrome = function(s) {

let onlyChar= [...s.toLowerCase()]

remove upper case somehow 