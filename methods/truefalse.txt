
0 and 1 are type 'number' but in a Boolean expression, 0 casts to false and 1 casts to true .
 i%2=0 or 1     if even it will be 0 and if odd it will be 1
              if true its odd           if false even 
       i%2 ? res.push(odds.pop()) : res.push(evens.pop())

array = [
  {strength: 3, name: "Leo"},
  {strength: 3, name: "Mike"},
  {strength: 2, name: "Aike"},
  {strength: 1, name: "Zike"} 
]

/* sorting by strenght first and name second 
> for char works in strings 
Returns : 
[
  { strength: 1, name: 'Zike' },
  { strength: 2, name: 'Aike' },
  { strength: 3, name: 'Leo' },
  { strength: 3, name: 'Mike' }
]
*/ 


This little function is often handy when sorting by multiple keys:

cmp = function(a, b) {
    if (a > b) return +1;
    if (a < b) return -1;
    return 0;
}
or, more concisely,

cmp = (a, b) => (a > b) - (a < b)
Which works because in javascript:

true - true // gives 0
false - false // gives 0
true - false // gives 1
false - true // gives -1
Apply it like this:

array.sort(function(a, b) { 
    return cmp(a.strength,b.strength) || cmp(a.name,b.name)
})





let arr = [[ 2,5],[3,6],[3,9],[2,7],[1,1],[1,1]]

arr.sort((a,b)=> b[0]-a[0] || a[1]-b[1]);

console.log(arr)
console.log(arr[0][1])



//let sortHigh = (a, b) => b - a;
//let sortLow = (a, b) => a- b;
/*
arr.sort(function(a, b) { 
    return sortHigh(a[0], b[0]) || sortLow(a[1], b[1])
})*/
//arr.sort((a,b)=> sortHigh(a[0], b[0]) || sortLow(a[1], b[1]));

var kidsWithCandies = function(candies, extraCandies) {
 return candies.map(val => { return val + extraCandies >= Math.max(...candies); });
};
kidsWithCandies( candies = [2,3,5,1,3], extraCandies = 3)
//Output : [ true, true, true, false, true ]
