
/**************************************************************************************/
/*************************************QUESTION********************************************/
/***********************************************************************************/
/*
2. Add Two Numbers
Medium
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
/*************************************************************************************/
/************************************ANSWER********************************************/
/*********************************************************************************/
var addTwoNumbers = function(l1, l2) {
    var remainder = 0;
    function recursiveAdd(l1, l2) {
      var val = (l1.val || 0) + (l2.val || 0) + remainder;
      var truncVal = val % 10;
      remainder = (val - truncVal) / 10;
      if (l1.next === null && l2.next === null && remainder === 0) {
        return new ListNode(truncVal);
      }
      return new ListNode(
        truncVal,
        recursiveAdd(l1.next || new ListNode(), l2.next || new ListNode())
      );
    }
    return recursiveAdd(l1, l2);
};
/**************************************************************************************/
/*************************************QUESTION********************************************/
/***********************************************************************************/