
/**************************************************************************************/
/*************************************QUESTION********************************************/
/***********************************************************************************/
/*
4. Median of Two Sorted Arrays
Hard
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).
Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
Example 3:
Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000
Example 4:
Input: nums1 = [], nums2 = [1]
Output: 1.00000
Example 5:
Input: nums1 = [2], nums2 = []
Output: 2.00000
    ln1>ln2? ln1=ln1 :  ln1=ln2;
    console.log(ln1)
*/
/*************************************************************************************/
/************************************ANSWER********************************************/
/*********************************************************************************/
const findMedianSortedArrays= (A, B) => {
	const nums = [];
	let i = 0;
	let j = 0;

	while (i < A.length || j < B.length) {
		if (A[i] < B[j] || B[j] === undefined) {
			nums.push(A[i]);
			i++;
		} else {
			nums.push(B[j]);
			j++;
		}
	}

	const { length } = nums;

	if (length % 2 !== 0) return nums[Math.floor(length / 2)];
	else return (nums[length / 2 - 1] + nums[length / 2]) / 2;
};
findMedianSortedArrays([1,3], [2]);
/**************************************************************************************/
/*************************************QUESTION********************************************/
/***************************************************************************************/
/*
5. Longest Palindromic Substring
Medium
Given a string s, return the longest palindromic substring in s.

Example 1:
Input: s = "babad"
Output: "bab"
Note: "aba" is also a valid answer.

Example 2:
Input: s = "cbbd"
Output: "bb"

Example 3:
Input: s = "a"
Output: "a"

Example 4:
Input: s = "ac"
Output: "a"
/*************************************************************************************/
/************************************ANSWER********************************************/
/*********************************************************************************/
var longestPalindrome = function(s) {
    let start = 0;
    let end = 0;
    let len = 0;
   
    //the helper function below finds the longest palindrome of the string
    function isPalindromeLength(s, left, right){
        if(left > right ) return 0;
        while(left >=0 && right < s.length && s[left] == s[right]){
            left --;
            right++;
        }
        return right - left - 1
    }
    
    
     for(var i = 0 ; i  < s.length; i++){
       let p1 = isPalindromeLength(s, i,i)
       let p2 = isPalindromeLength(s, i, i+1)
       len = Math.max(p1,p2)
	   //the if statement below calculates the substring using the length of the longest palindrome 
        if(len > end - start){
          start  = Math.ceil(i - ((len-1)/2))/** here we subtract the (length-1)/2 from the current index and round it up. e.g when our length is 2, (2-1)/2=>0.5 then we round up using Math.ceil to 1 **/ 
          end = i + (len/2)
        } 
        
    }
    
    return s.slice(start, end + 1) 
};
longestPalindrome(s = "cbbd");

/**************************************************************************************/
/*************************************QUESTION********************************************/
/***********************************************************************************/
/*
41. First Missing Positive
Hard
Given an unsorted integer array nums, find the smallest missing positive integer.
You must implement an algorithm that runs in O(n) time and uses constant extra space.
Example 1:
Input: nums = [1,2,0]
Output: 3
Example 2:
Input: nums = [3,4,-1,1]
Output: 2
Example 3:
Input: nums = [7,8,9,11,12]
Output: 1
*/
/*************************************************************************************/
/************************************ANSWER********************************************/
/*********************************************************************************/

var firstMissingPositive = function (nums) {
  var i = 1, 
  len = nums.length + 1;
  for (let j = 0; i < len; j = i++) {
    // Finding required int i.e. 1,2,3....
    while (nums[j] !== i && j < nums.length)  j++;
    // Swapping with start + i index of array if required int is found
    if (nums[j] === i)  [nums[i - 1], nums[j]] = [nums[j], nums[i - 1]];
    else break;
  }
  
  return i;
};
firstMissingPositive(nums = [7,8,9,11,12]);
/**************************************************************************************/
/*************************************QUESTION********************************************/
/***********************************************************************************/
/*