
/**************************************************************************************/
/*************************************QUESTION********************************************/
/***********************************************************************************/
/*
4. Median of Two Sorted Arrays
Hard
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).
Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
Example 3:
Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000
Example 4:
Input: nums1 = [], nums2 = [1]
Output: 1.00000
Example 5:
Input: nums1 = [2], nums2 = []
Output: 2.00000
    ln1>ln2? ln1=ln1 :  ln1=ln2;
    console.log(ln1)
*/
/*************************************************************************************/
/************************************ANSWER********************************************/
/*********************************************************************************/
const findMedianSortedArrays= (A, B) => {
	const nums = [];
	let i = 0;
	let j = 0;

	while (i < A.length || j < B.length) {
		if (A[i] < B[j] || B[j] === undefined) {
			nums.push(A[i]);
			i++;
		} else {
			nums.push(B[j]);
			j++;
		}
	}

	const { length } = nums;

	if (length % 2 !== 0) return nums[Math.floor(length / 2)];
	else return (nums[length / 2 - 1] + nums[length / 2]) / 2;
};
findMedianSortedArrays([1,3], [2]);
/**************************************************************************************/
/*************************************QUESTION********************************************/
/***************************************************************************************/
/*
5. Longest Palindromic Substring
Medium
Given a string s, return the longest palindromic substring in s.

Example 1:
Input: s = "babad"
Output: "bab"
Note: "aba" is also a valid answer.

Example 2:
Input: s = "cbbd"
Output: "bb"

Example 3:
Input: s = "a"
Output: "a"

Example 4:
Input: s = "ac"
Output: "a"
/*************************************************************************************/
/************************************ANSWER********************************************/
/*********************************************************************************/
var longestPalindrome = function(s) {
    let start = 0;
    let end = 0;
    let len = 0;
   
    //the helper function below finds the longest palindrome of the string
    function isPalindromeLength(s, left, right){
        if(left > right ) return 0;
        while(left >=0 && right < s.length && s[left] == s[right]){
            left --;
            right++;
        }
        return right - left - 1
    }
    
    
     for(var i = 0 ; i  < s.length; i++){
       let p1 = isPalindromeLength(s, i,i)
       let p2 = isPalindromeLength(s, i, i+1)
       len = Math.max(p1,p2)
	   //the if statement below calculates the substring using the length of the longest palindrome 
        if(len > end - start){
          start  = Math.ceil(i - ((len-1)/2))/** here we subtract the (length-1)/2 from the current index and round it up. e.g when our length is 2, (2-1)/2=>0.5 then we round up using Math.ceil to 1 **/ 
          end = i + (len/2)
        } 
        
    }
    
    return s.slice(start, end + 1) 
};
longestPalindrome(s = "cbbd");
/**************************************************************************************/
/*************************************QUESTION********************************************/
/***************************************************************************************/
/*
10. Regular Expression Matching
Hard
Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*' where: 

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
Example 4:

Input: s = "aab", p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches "aab".
Example 5:

Input: s = "mississippi", p = "mis*is*p*."
Output: false
*/
/*************************************************************************************/
/************************************ANSWER********************************************/
/*********************************************************************************/

//var isMatch = function(s, p) {

  /*
  let obj ={}, star=0, period =0;
  let dot = p.indexOf('.');
  
  if(dot===-1 && p.indexOf('*')===-1 && s!=p) return false
  //if(p.indexOf('.')!=-1) 
  
  for(let i=0; i<s.length; i++){
    if(s.indexOf(p[i])===-1 && p.indexOf('*')===-1){return false}
     if(p[i]!= '*' && p[i]!='.' && s.indexOf(p[i])===-1 ){
       p.slice(p.indexOf(p[i]))
       p.slice(p.indexOf('*'))
       }
  if(p[i]==='*') star=star+1;
  if(p[i]==='.') period=period+1;
  if(p.indexOf(s[i])===-1 && dot===-1) return false
    if(!obj[s[i]]) obj[s[i]]=1;
    else obj[s[i]]=obj[s[i]]+1

  }

  console.log(star)
  console.log(period)
 //p[p.indexOf('*')]=Object.keys(obj)[0];
//if(obj[s[i]])
let z = p.replace(p[p.indexOf('*')],Object.keys(obj)[0])
//console.log(p[p.indexOf('*')]=Object.keys(obj)[0])
console.log(z)
  console.log(obj)
  
};*/

const isMatch = (s, p) => {
	let matrix = [...new Array(s.length + 1)].map(() =>
		new Array(p.length + 1).fill(false)
	);
console.log(matrix)
	matrix[0][0] = true;

	// fill first row
	for (let i = 1; i <= p.length; i++) {
		let pChar = p[i - 1];

		if (pChar === '*') matrix[0][i] = matrix[0][i - 2];
	}
	// can only be the most previous value
	for (let row = 1; row <= s.length; row++) {
		for (let col = 1; col <= p.length; col++) {
			let pChar = p[col - 1],
				sChar = s[row - 1],
				previousPChar = p[col - 2]; // col - 2 is for deletion of the previous character

			if (pChar === '*') {
				// matrix[row][col - 2] --> if we shaved off the letter, would we have a match
				if (matrix[row][col - 2]) {
					matrix[row][col] = true;
				}
				// if previous p and sChar are the same, we look
				else if (previousPChar === sChar || previousPChar === '.') {
					// This is the weirdest case to understand
					// Since the previousPChar and sChar are equal, we can look at s as if it
					// does not exist, to account for shavng it off / extra occurances
					// of that single letter
					matrix[row][col] = matrix[row - 1][col];
				}
			} else if (pChar === sChar || pChar === '.') {
				// answer is the same as if not having these two letters
				matrix[row][col] = matrix[row - 1][col - 1];
			}
		}
	}
  console.log(matrix)
	return matrix[s.length][p.length];
};


isMatch( s = "aa", p = "a*")


//if theres more of a letter in p than in s return false 1
/**************************************************************************************/
/*************************************QUESTION********************************************/
/***********************************************************************************/
/*
41. First Missing Positive
Hard
Given an unsorted integer array nums, find the smallest missing positive integer.
You must implement an algorithm that runs in O(n) time and uses constant extra space.
Example 1:
Input: nums = [1,2,0]
Output: 3
Example 2:
Input: nums = [3,4,-1,1]
Output: 2
Example 3:
Input: nums = [7,8,9,11,12]
Output: 1
*/
/*************************************************************************************/
/************************************ANSWER********************************************/
/*********************************************************************************/

var firstMissingPositive = function (nums) {
  var i = 1, 
  len = nums.length + 1;
  for (let j = 0; i < len; j = i++) {
    // Finding required int i.e. 1,2,3....
    while (nums[j] !== i && j < nums.length)  j++;
    // Swapping with start + i index of array if required int is found
    if (nums[j] === i)  [nums[i - 1], nums[j]] = [nums[j], nums[i - 1]];
    else break;
  }
  
  return i;
};
firstMissingPositive(nums = [7,8,9,11,12]);
/**************************************************************************************/
/*************************************QUESTION********************************************/
/***********************************************************************************/
/*